caption: setup
created: 20210806162209045
modified: 20230512162633404
title: $:/plugins/jmh/pm/setup
type: text/vnd.tiddlywiki

\define makeOP()

<div style="display:none">
<style>
.scrolling-wrapper {
  overflow-x: scroll;
  overflow-y: hidden;
}
.myTextEdit { 
  width:450px;
}
</style>

</div>

<h1>MM YYYY</h1>
<table style="font-size:12px"><$list filter="[tag[toplevel]!tag[Archived]]" variable="fieldname"><tr style="vertical-align:top"><td><$link to=<<fieldname>>/></td><td style="width:500px"><$edit-text tiddler={{{ [<fieldname>addprefix[$:/config/pm/objectives/]] }}} minHeight="10px" tag='textarea' class="myTextEdit" default="" /></td></tr></$list></table>
\end

\define makeDB()
!!! [[Journal]] | [[Upcoming Meetings]] | [[Loose Threads]] | [[Weekly Pick List]]

{{$:/plugins/jmh/pm/ui/Dashboard}}
\end

\define makeLT()
! Orphaned Meetings
<<list-links filter:"[!is[system]tag[Meeting]sort[title]] -[!is[system]tag[Project]tagging[]tag[Meeting]] -[!is[system]tag[Recurring]tagging[]tag[Meeting]]">>

! Inline Notes to Clean Up
<$list filter="[!is[system]!is[current]!title[Dashboard]regexp:text[!!! ]sort[modified]]"><$link><$view field="title"/></$link><span class="pm-indent1"><$link><span class="pm-graybox"><$context term="!!! " before="0" after="200" /></span></$link></span></$list>

! [[Past Dues]]

! Meeting without valid date prefix
<$set name="digit-pattern2" value="^[0-9]{6}"><<list-links "[tag[Meeting]!regexp:title<digit-pattern2>]">></$set>

! 10 earliest dates linked since <$list filter=
"[!sort[modified]limit[300]last[1]]"><$view format="date" field="modified" template="mmm 0DD "/></$list>; [[details|Date assignment check]]

<$set name="digit-pattern" value="^[0-9]{6}$"><$list filter="[!sort[modified]limit[300]links[]regexp:title<digit-pattern>sort[]first[10]]"><li><$link tiddler={{!!title}} /></li></$list></$set>

! Unformatted Date Tiddlers
//These should all be in the future//

<$set name="digit-pattern" value="^[0-9]{6}$"><<list-links "[regexp:title<digit-pattern>!tag[Journal]]">></$set>
\end

\define makePD()
<$list filter="[tag[todo]!tag[done]links[]tag[Journal]sort[]]" variable="date"><li><<date>></li>
<ul><$list filter="[<date>backlinks[]tag[todo]!tag[done]]"><li><$link {{!!title}} /></li></$list>
</ul></$list>
\end

\define makeDAC()
All dates linked from tiddlers edited in the past 14 days (with the edited backlink tiddlers)

<$set name="digit-pattern" value="^[0-9]{6}$">
<$list filter="[days[-14]links[]regexp:title<digit-pattern>sort[]]"><li><$link /></li><<list-links filter:"[is[current]backlinks[]days[-14]]">></$list>
</$set>
\end

\define makeUM()
<$list filter="[tag[Meeting]!tag[Held]sort[title]]">
<h2><$link /></h2>
<blockquote>{{!!text}}</blockquote>
</$list>
\end

\define makeWP()
*The pick list is intended for **guidance** in daily timeblocking. Hard deadlines override pick list and emerging priorities can trump items from the list as well.*<hr>
## [[Objectives Planner]] <hr>

## Monday

## Tuesday

## Wednesday

## Thursday

## Friday

<hr>

*Add priority to-dos here*

# General Filler Tasks

<$list filter="[has[minutes]!has[due]!tag[done]sortan[minutes]]" template="$:/plugins/jmh/pm/ui/TodoTemplate">
\end

\define makeWWmain()
[[2021 / 06 / 25]]

{{Review Checklist 1}}

{{Review Checklist 2}}

{{Review Checklist 3}}

{{Review Checklist 3.1}}

{{Review Checklist 4}}

{{Review Checklist 5}}
\end

\define makeMRmain()
[[2021 / 08 / 05]]

# Get Motivated
[This is more for personal planning...](https://medium.com/the-mission/becoming-incredibly-successful-means-saying-no-to-the-wrong-money-34fbfddc528b)

{{Review Checklist 1}}{{Review Checklist 2}}{{Review Checklist 3m}}{{Review Checklist 4}}{{Review Checklist 5}}

# Archive

<input type="checkbox"> Backup NoteHub and Emails files - those are a key resource without which the wiki is not as useful:
- *Insert instructions for backup, e.g., Copy Downloads > Notes into "this repo" and rename as a dated folder.*
\end

\define makeCheck1()
# Get Clear

Get "in" to empty:

<input type="checkbox"> Clear Outlook inbox.

<input type="checkbox"> Clear any physical notes.

<input type="checkbox"> Clear out Outlook 'To Review' folder, do not need to process each item:
- disregard (if not associated to current project or reference location), or
- log a task for next step (such as notetaking/filing)

<input type="checkbox"> Run `mp.R` and associate/annotate any imported meetings.

<input type="checkbox"> Clear out inline flags and link up any global meeting orphans ([[Loose Threads]])

<input type="checkbox"> Clear out [[Dashboard]] inbox: assign each task to at least one Project

<input type="checkbox"> ~~Pending [[Revise approach to Comms Planning]]~~

<input type="checkbox"> ~~Pending incorporation of more complete personal planning.~~
\end

\define makeCheck2()
# Get Current

Get active lists up-to-date and complete.

## Log as you go

Open/create a [[Weekly Review Log]] and summarize key accomplishments/takeaways:
  - to-dos, milestones, completed projects
  - driving learnings and resume builders

## Review Current Flow Context

<input type="checkbox"> Review [[week's journal entries|Journal]], especially meeting notes
- Are there any remaining or emergent action items without tasks? Log a task.
- Are any follow-ups not getting proper prioritization? Determine next step and log a task or update dates.
- Ensure meetings are tagged to (or reference) any areas where their outcomes are applicable.

<input type="checkbox"> Review [[Upcoming Meetings]] for the week
- Log any tasks that come to mind.
- Make notes regarding prep and annotate prep dates.

<input type="checkbox"> Review due list
- Each follow-up should have a date associated to trigger follow-up on daily plan.
- Are any follow-ups complete? Clear due date and ensure next step is defined.
> <$list filter="[has[due]sort[due]]" template="$:/plugins/jmh/pm/ui/TodoTemplate">

<input type="checkbox"> Review for recurring meetings without children
> <$list filter="[tag[Recurring]!tag[Held]] -[!tag[Held]tags[]tag[Recurring]]" template="$:/plugins/jmh/pm/ui/MeetingTemplate">
\end

\define makeCheck3()
## Take Stock of Project Status

Evaluate the status of projects, goals, and outcomes. **Objectives:** very quickly: [[|Weekly Project To-Do]]
- Organize notes and catch up on status
- Capture steps to celebrate accomplishments and consolidate learnings
- Plan intentions for the next week

<$list filter="[tag[toplevel]!tag[Archived]]">{{||Weekly Project To-Do}}</$list>
\end

\define makeCheck31()
# Build Weekly Plan

## Why a Weekly Plan?

**Objectives** provide an end point; **deadlines** provide urgency; a **limited horizon** forces a realistic scope to attack **with intentionality**.

The pick list is intended for *guidance* in daily timeblocking. Hard deadlines override pick list and emerging priorities can trump items from the list as well.

<hr>

## Process
1. (Project reviews have populated the [[Weekly Pick List]] tiddler with hard deadlines and other priority tasks to add.)
1. Review time/availability contours of the week from calendar:
    - What are the big chunks (1.5 hr+) available for deep/strategic work?
    - How much net time overflow is left? (Account for some breaks, admin, etc.)
1. Rationalize weekly objectives across bandwidth and project priorities
    - Generally prioritize across full set of tasks: refer to [[Objectives Planner]] to stay aligned to monthly objectives & time allocation estimates
      - This can mingle MDT and other goals.
    - Organize [[Weekly Pick List]] with **daily** high-level intentions followed by roughly prioritized **slush** tasks
    - Kick tasks to 'backburner' that are very unlikely to happen.
\end

\define makeCheck3m()
# Monthly Project Review

Evaluate the status of projects, goals, and outcomes: 
[[|Monthly Project To-Do]]
<$list filter="[tag[toplevel]!tag[Archived]]">{{||Monthly Project To-Do}}</$list>

<input type="checkbox"> Final update to [[Objectives Planner]]: add projected time allocation, totaling to 100%, to guide weekly planning
- May need to trim back some of the objectives to match the allocation.
\end

\define makeCheck4()
# Get Creative

- Jot down some higher level thoughts about self-management, team/org directions, system improvements, white space goals, etc.
  - Use [[Weekly Review Log]] entry as a catching point. Add this section at the bottom.
  - Particular thoughts can branch off into other musing tiddlers: use `Yellow` tag for 'someday/maybe' and broader thoughts.

- Review `Yellow` tag thoughts: what might make sense to reintegrate in strategic planning, turn into to-dos, etc.

- Add to Locus:
  - Week's summary, key takeaways, start/stop/continue (while fresh): add to a Locus daily journal tiddler
  - Occasionally export the `Yellow` tag tiddlers into Locus
\end

\define makeCheck5()
# Get Ahead

<input type="checkbox"> Copy and timeblock next work day's Journal tiddler.

# Log Off

<input type="checkbox"> Update date on this tiddler for next Weekly Wrap, then run `nh.R` and shut down.

<input type="checkbox"> Submit timesheets.
\end

\define makeURS()
- **nh.R** - NH file management

```
nh <- "C:/Users/houlej2/Downloads/Notes/ToteHub.html"
nh_old <- "C:/Users/houlej2/Downloads/Notes/ToteHub_old.html"

# Find all matches in Downloads
dl <- "C:/Users/houlej2/Downloads/"
dl_files <- dir(dl)
flist <- dl_files[grep("ToteHub",dl_files)]
if (length(flist) > 0) {
  dl_nh <- paste0(dl,flist)
  
  chktime <- function(fn) {
    file.info(fn)$atime
  }
  
  # ID correct new file
  j <- mapply(dl_nh, FUN=chktime)
  nh_new <- names(j[j==max(j)])
  
  # Move and remove files
  if(file.exists(nh_old)) {
    file.remove(nh_old)
  }
  file.copy(nh, nh_old)
  file.remove(nh)
  file.copy(nh_new, nh)
  file.remove(dl_nh)
}

```

- **runmp.bat** - windows batch script to run the below; place in `/Meetings` folder

```
"C:\Program Files\R\R-4.3.0\bin\Rscript.exe" C:\Users\houlej2\Downloads\Notes\mp.R
```

- **mp.R** - turn meeting invites into tiddlers

```
# devtools::install_github("hrbrmstr/msgxtractr") # requires RTools
library(msgxtractr)

# Find all matches in Meetings
dl <- "C:/Users/houlej2/Downloads/Notes/Meetings"
dl_files <- dir(dl,recursive = TRUE)
dl_files <- dl_files[!grepl(".tid",dl_files)]
dl_files <- dl_files[!grepl(".bat",dl_files)]
for(file in dl_files) {
  
  fname <- paste0(dl,"/",file)
  msg2 <- read_msg(fname)
  date <- sub("(.{6}).*","\\1",file)
  
  title <- gsub("\\s+", " ", msg2$subject[1])
  host <- msg2$sender$sender_name[1]
  attendees <- msg2$display_envelope$display_to[1]
  optional <- msg2$display_envelope$display_cc[1]
  
  content <- msg2$body$text[stringr::str_length(msg2$body$text)>2][1]
  content <- content[length(content)]
  content <- sub("<https://zoom.us/>.*","",content)
  content <- gsub("\r\n\r\n","\n",content)
  content <- gsub("\\*\t","- ",content)
  
  tid <- c(paste0("title: ", date, " ", title), #new
           paste("type: ", "text/x-markdown"),
           paste("tags: ", "Meeting"),
           "",
           paste("Host: ", host),
           "",
           paste("Attendees: ", attendees),
           "",
           paste("Optional:", optional),
           "",
           content,
           "<hr>",
           "",
           "**Minutes**",
           "",
           "**Next Steps**")
  
  outf <- as.numeric(Sys.time())
  Sys.sleep(0.5)
  writeLines(tid,paste0("C:/Users/houlej2/Downloads/Notes/Meetings/",outf,".tid"))
  file.remove(fname)
}

cat(length(dl_files))
```

- **dm.R** - setup meeting folders

```
make_date_folders <- function(year, month, firstmon) {
  
  dc <- Vectorize(dir.create)
  dl <- "C:/Users/houlej2/Downloads/Notes/Meetings/"
  
  basewk <- c(firstmon:(firstmon+4))
  
  days <- c(basewk - 7, basewk, basewk + 7, basewk + 14, basewk + 21, basewk + 28)
  days <- stringr::str_pad(days[days > 0 & days < 32], 2, "left","0")
  
  dirs <- paste0(dl, year, month, days)
  newdirs <- dirs[!dir.exists(dirs)]
  dc(newdirs)
}

# Update this line with YY, MM, and the date of the first Monday of the month
make_date_folders("23","05",1)
```

- **vtt.R** - process vtt files

```
vttfile <- "C:/Users/houlej2/Downloads/GMT20210527-210754_Recording.transcript.vtt"
vr <- readLines(vttfile)

vr2 <- vr[!grepl("-->",vr)]
vr3 <- vr2[!grepl("[0-9]{1,3}",vr2)]
vr4 <- vr3[vr3 != ""]

writeLines(vr4, "C:/Users/houlej2/Downloads/Hyatt.txt")
```

- **migration.R** - directly edit NH source file (for file location migration) <mark>consider removing for search-and-replace

```
library(tidyverse)

nh <- "C:/Users/houlej2/Downloads/Notes/NoteHub.html"

#### Example ####

k <- readLines(nh)
linefrom1 <- "file:///C:/Users/houlej2/Downloads/Data%20Team%20Workspace/Initiatives/1A%20Portfolio"
linefrom2 <- "file://sitebuilder2/corporate/EUMDR/EUMDRDataTeam/Shared%20Documents/Data%20Team%20Workspace/Initiatives/1A%20Portfolio"
lineto <- "file:///C:/Users/houlej2/OneDrive%20-%20Medtronic%20PLC/EU%20MDR%20Portfolio%20Tracker/Archives/Solution%20Design%20and%20Implementation"
start <- Sys.time()
k %>% 
  gsub(linefrom1,lineto, .) %>% 
  gsub(linefrom2,lineto, .) %>% 
  writeLines("C:/Users/houlej2/Downloads/Notes/NoteHub_edited.html")
end <- Sys.time()
end - start

k %>% grep(linefrom2, .)
```
\end

\define makeSE()
<$edit-text tiddler="$:/temp/styleexport" field="text" tag="input" size="60" focus="true"/>
<span style="font-family:calibri;font-size:11pt;color:black;background-color:rgba(255,255,255,0.1)">
<$transclude tiddler={{$:/temp/styleexport}} />
<b>Next Steps</b>
<$set name=auto filter='[prefix[note/]contains:list{$:/temp/styleexport}]' >
<$set name=auto2 filter="[enlist<auto>] -[{$:/temp/styleexport}get[list]enlist-input[]]" >
<$list filter="""[{$:/temp/styleexport}get[list]enlist-input[]] [enlist<auto2>] +[is[tiddler]]""">{{!!text}}</$list>
</$set>
</$set>
</span>
\end

\define makeNJT()
<span style="font-size:14px">[[Style Export]] | [[Minutes Editor]] | [[Weekly Pick List]] | [[Datelink Explorer]] | [[Table Editor|https://www.tablesgenerator.com/markdown_tables]]</span>

# Time Block



## 8 <hr>
- Clear emails

## 8:30 <hr>

## 9 <hr>

## 9:30 <hr>

## 10 <hr>

## 10:30 <hr>

## 11 <hr>

## 11:30 <hr>

## 12 <hr>
- Lunch
- Clear & reply emails

## 12:30 <hr>

## 1 <hr>

## 1:30 <hr>

## 2 <hr>

## 2:30 <hr>

## 3 <hr>

## 3:30 <hr>

## 4 <hr>

## 4:30 <hr>
- Clear & reply emails
- Copy & timeblock
\end

* ''Installation:'' A brand new project should start from tiddlywiki/empty (v5.2.2, although later should also work), and include the following plugins (available from this demo wiki):
** <mark>Add these, some already noted</mark>

* ''Configuration:'' Recommended setup is to have local saving upon ($:/ControlPanel > Saving > General)
** Config scripts help manage the files that are produced, and related pieces of data that will flow into the wiki or be accessed thereby. <mark>More info about these?</mark>
** Helpful file structures that play well with such a wiki (and config files):
*** Setup the wiki in a `Notes` subdirectory of `Downloads` (and adjust config scripts accordingly); existing and archived versions will reside here 
*** Setup email subfolders in an `Emails` directory under shared location (e.g., OneDrive); the email subfolders can be changed out on occasion as they fill up.
*** Create shortcuts to these locations in Chrome for quick access
*** Also create a `Meetings` subdirectory inside `Downloads/Notes`, where dated folders will contain meeting invites (adjust config scripts)

The buttons below help set up a wiki with tiddlers that include tools and reports to help manage the flow of work and information.

<hr>

<$button>Objectives Planner
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Objectives Planner"
  text=<<makeOP>> />
</$button>

A dashboard for assigning periodic objectives across all active projects, which become visible within each project.

<hr>

<$button>Dashboard
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Dashboard"
  text=<<makeDB>>/>
</$button>

Contains links to some of these tools and a tabbed display for accessing grouped lists of projects and todos by status, due date, etc.

<hr>

<$button>Loose Threads
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Loose Threads"
  text=<<makeLT>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Past Dues"
  text=<<makePD>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Date assignment check"
  text=<<makeDAC>>/>
</$button>

Landing place for tiddlers that are marked inline for follow-up, also contains a few other lists to ensure the integrity of some of the other tools and reports (such as 'orphaned meetings' not assigned to projects, etc.)

<hr>

<$button>Upcoming Meetings
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Upcoming Meetings"
  text=<<makeUM>>/>
</$button>

A list of upcoming meetings (not yet marked Held), sorted by date.

<hr>

<$button>Weekly Pick List
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Weekly Pick List"
  text=<<makeWP>>/>
</$button>

A simple planning list, to use for weekly planning and reference in daily timeblocking.

<hr>

<$button>Weekly Wrap Checklist (& components)
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Weekly Wrap Checklist"
  text=<<makeWWmain>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 1"
  text=<<makeCheck1>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 2"
  text=<<makeCheck2>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 3"
  text=<<makeCheck3>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 31"
  text=<<makeCheck31>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 4"
  text=<<makeCheck4>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 5"
  text=<<makeCheck5>>/>
</$button>

A review checklist for closing the week and looking ahead.

<hr>

<$button>Monthly Review Checklist (& components)
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Monthly Review Checklist"
  text=<<makeMRmain>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 1"
  text=<<makeCheck1>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 2"
  text=<<makeCheck2>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 3m"
  text=<<makeCheck3m>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 4"
  text=<<makeCheck4>>/>
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Review Checklist 5"
  text=<<makeCheck5>>/>
</$button>

A review checklist for closing the month and looking ahead.

<hr>

<$button>PM Tags
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="done"
  color="#C1E4B4"
  icon="$:/core/images/done-button" />
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Meeting"
  color="#B8E0FF"
  icon="$:/plugins/jmh/pm/images/meeting" />
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="todo"
  color="#F0B775"
  icon="$:/plugins/jmh/pm/images/tasks" />
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Held"
  color="#C3FFAD"
  icon="$:/core/images/done-button" />
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Project"
  color="#99056A"
  icon="$:/core/images/copy-clipboard" />
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Yellow"
  color="#F9DA3E"
  icon="$:/core/images/export-button" />
</$button>

Apply styling to commonly used PM tags.

<hr>

<$button>Utility R scripts
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Utility R scripts"
  text=<<makeURS>>
  type="text/x-markdown" />
</$button>

Utility scripts in R helpful for file processing around managing the single file wiki.

<hr>

<$button>Style Export
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Style Export"
  text=<<makeSE>>/>
</$button>

Transclusion template to format tiddler in vanilla, MS Outlook-compatible format (e.g., for pasting meeting minutes into email)

<hr>

<$button>Datelink Explorer
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Datelink Explorer"
  text={{$:/plugins/jmh/pm/setup/de}} />
</$button>

Simple search and filter utility to find and organize tiddlers linking to a common tiddler (e.g., a date, perhaps to find all tiddlers citing a past date)

<hr>

<$button>Batch open or close tiddlers
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Batch open or close tiddlers"
  text={{$:/plugins/jmh/pm/setup/boct}} />
</$button>

Tool for managing tiddlers and tagging en masse

<hr>

<$button>Refiling search-replace
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Refiling search-replace"
  text={{$:/plugins/jmh/pm/setup/rsr}} />
</$button>

Tool for finding and replacing text within tiddlers - especially useful for updating local file references when your files move

<hr>

<$button>New Journal Title
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="$:/config/NewJournal/Title"
  text="YY0MM0DD-" />
</$button> <$button>New Journal Text
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="$:/config/NewJournal/Text"
  text=<<makeNJT>> />
</$button>

Setup new Journal entries with a YYMMDD title and with a workday timeblock template.

<hr>

<$button>Notelink Pick List
<$action-sendmessage 
  $message="tm-new-tiddler"
  title="Notelink Pick List"
  text={{$:/plugins/jmh/pm/setup/nlpl}} />
</$button>

Utility for listing categorized notelinks with their category summaries, and re-ordering them.